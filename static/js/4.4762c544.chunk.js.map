{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/Dialogs.jsx","hoc/withAuthRedirect.js","components/Dialogs/DialogsContainer.jsx"],"names":["module","exports","DialogItem","props","path","id","className","s","dialog","active","to","name","Message","message","maxLength50","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","placeholder","component","Textarea","validate","required","Dialogs","state","dialogsPage","dialogsElements","dialogs","map","d","key","messagesElements","messages","m","isAuth","dialogsItems","values","sendMessage","newMessageBody","mapStateToPropsForRedirect","auth","compose","connect","dispatch","sendMessageCreator","Component","RedirectComponent","this","React"],"mappings":"uFACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,2B,+FCgBnKC,EAbI,SAACC,GAChB,IAAIC,EAAO,YAAcD,EAAME,GAC/B,OACI,yBAAKC,UAAWC,IAAEC,OAAS,IAAMD,IAAEE,QAC/B,kBAAC,IAAD,CACIC,GAAIN,GACHD,EAAMQ,QCCRC,EARC,SAACT,GACb,OAAO,yBACHG,UAAWC,IAAEM,SACZV,EAAMU,U,yCCGTC,EAAcC,YAAiB,IAqB/BC,EAAsBC,YAAU,CAClCC,KAAM,wBADkBD,EAnBL,SAACd,GACpB,OAEI,0BAAMgB,SAAUhB,EAAMiB,cAClB,6BACI,kBAACC,EAAA,EAAD,CACIC,YAAa,UACbX,KAAM,iBACNY,UAAWC,IACXC,SAAU,CAACC,IAAUZ,MAG7B,6BACI,6CAuDDa,EA7CC,SAACxB,GAGb,IAAIyB,EAAQzB,EAAM0B,YAEdC,EAAkBF,EAAMG,QACvBC,KAAI,SAAAC,GAAC,OAAI,kBAAC,EAAD,CACNtB,KAAMsB,EAAEtB,KACRuB,IAAKD,EAAE5B,GACPA,GAAI4B,EAAE5B,QAEV8B,EAAmBP,EAAMQ,SACxBJ,KAAI,SAAAK,GAAC,OAAI,kBAAC,EAAD,CACNxB,QAASwB,EAAExB,QACXqB,IAAKG,EAAEhC,QAUf,OAAKF,EAAMmC,OAGP,yBAAKhC,UAAWC,IAAEwB,SACd,yBAAKzB,UAAWC,IAAEgC,cACbT,GAEL,yBAAKxB,UAAWC,IAAE6B,UACd,6BAAMD,GAON,kBAACnB,EAAD,CAAqBG,SAnBX,SAACqB,GACnBrC,EAAMsC,YAAYD,EAAOE,qBAGH,kBAAC,IAAD,CAAUhC,GAAG,Y,wCCtDvCiC,EAA6B,SAACf,GAAD,MAAY,CACzCU,OAAQV,EAAMgB,KAAKN,S,OCkBRO,sBACXC,aAhBkB,SAAClB,GACnB,MAAO,CACHC,YAAaD,EAAMC,gBAGF,SAACkB,GACtB,MAAO,CAEHN,YAAa,SAACC,GACVK,EAASC,YAAmBN,UDTR,SAACO,GAAe,IACtCC,EADqC,uKAGnC,OAAKC,KAAKhD,MAAMmC,OAET,kBAACW,EAAcE,KAAKhD,OAFI,kBAAC,IAAD,CAAUO,GAAG,eAHT,GACX0C,IAAMH,WAWtC,OAFqCH,YAAQH,EAARG,CAAoCI,KCK9DL,CAIVlB","file":"static/js/4.4762c544.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2OGN1\",\"dialogsItems\":\"Dialogs_dialogsItems__1MmTA\",\"active\":\"Dialogs_active__1_flS\",\"messages\":\"Dialogs_messages__327U3\",\"message\":\"Dialogs_message__2iREh\"};","import React from 'react';\r\nimport s from './../Dialogs.module.css'\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nconst DialogItem = (props) => {\r\n    let path = \"/dialogs/\" + props.id;\r\n    return (\r\n        <div className={s.dialog + ' ' + s.active}>\r\n            <NavLink\r\n                to={path}>\r\n                {props.name}\r\n            </NavLink>\r\n        </div>\r\n    )\r\n};\r\n\r\n\r\nexport default DialogItem;","import React from 'react';\r\nimport s from './../Dialogs.module.css';\r\n\r\nconst Message = (props) => {\r\n    return <div\r\n        className={s.message}>\r\n        {props.message}\r\n    </div>\r\n};\r\n\r\n\r\nexport default Message;","import React from 'react';\r\nimport s from './Dialogs.module.css'\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport { Field, reduxForm } from 'redux-form';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { Textarea } from '../common/FormsControls/FormsControls';\r\nimport { maxLengthCreator, required } from '../../utils/validators/validators';\r\n\r\nconst maxLength50 = maxLengthCreator(50);\r\n\r\nconst AddMessageForm = (props) => {\r\n    return (\r\n        // handleSubmit придет из Конт Комп redux-form\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field\r\n                    placeholder={'Message'}\r\n                    name={'newMessageBody'}\r\n                    component={Textarea}\r\n                    validate={[required, maxLength50]}\r\n                />\r\n            </div>\r\n            <div>\r\n                <button>Send</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddMessageFormRedux = reduxForm({\r\n    form: 'dialogAddMessageForm'\r\n})(AddMessageForm)\r\n\r\nconst Dialogs = (props) => {\r\n    // обращаемся к store и получаем тот state, который\r\n    // нам нужен для Dialogs\r\n    let state = props.dialogsPage;\r\n\r\n    let dialogsElements = state.dialogs\r\n        .map(d => <DialogItem\r\n            name={d.name}\r\n            key={d.id}\r\n            id={d.id}\r\n        />);\r\n    let messagesElements = state.messages\r\n        .map(m => <Message\r\n            message={m.message}\r\n            key={m.id}\r\n        />);\r\n    /*\r\n    let newMessageBody = state.newMessageBody;\r\n    */\r\n\r\n    const addNewMessage = (values) => {\r\n        props.sendMessage(values.newMessageBody);\r\n    }\r\n\r\n    if (!props.isAuth) return <Redirect to=\"/login\" />\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                <div>{messagesElements}</div>\r\n                {/* <div>\r\n                    <div><textarea value={newMessageBody}\r\n                        onChange={onNewMessageChange}\r\n                        placeholder='Enter' /></div>\r\n                    <div><button onClick={onSendMessageClick}>Send</button></div>\r\n                </div> */}\r\n                <AddMessageFormRedux onSubmit={addNewMessage} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dialogs;","import React from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport {connect} from 'react-redux';\r\n\r\nlet mapStateToPropsForRedirect = (state) => ({\r\n    isAuth: state.auth.isAuth\r\n});\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n    class RedirectComponent extends React.Component {\r\n        render() {\r\n            if (!this.props.isAuth) return <Redirect to=\"/login\" />\r\n\r\n            return <Component {...this.props} />\r\n        }\r\n    }\r\n\r\n    \r\n    let CinnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent);\r\n\r\n    return CinnectedAuthRedirectComponent;\r\n}","import {sendMessageCreator} from \"../../redux/dialogs-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport { withAuthRedirect } from '../../hoc/withAuthRedirect';\r\nimport { compose } from 'redux';\r\n\r\n// Две фун-ции, которые возвращают объект\r\n// Замапить state на пропсы, превратить часть state в props\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n    }\r\n};\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        // 76 now it's accept newMessageBody from Dialogs\r\n        sendMessage: (newMessageBody) => {\r\n            dispatch(sendMessageCreator(newMessageBody));\r\n        }\r\n    }\r\n};\r\n\r\n// Закидывание происходит с конца, от Dialogs\r\nexport default compose(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n    )\r\n    (Dialogs);;"],"sourceRoot":""}